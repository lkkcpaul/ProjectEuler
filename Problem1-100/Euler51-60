{"cells":[{"cell_type":"markdown","metadata":{"id":"dTdDWI38S5pg"},"source":["**p51**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eJsBBHlRS8gr"},"outputs":[],"source":["import math\n","import itertools\n","primes = [2]\n","for i in range(3,1000000,2):\n","  j = 0\n","  isprime = True \n","  while primes[j] <= math.floor(math.sqrt(i)):\n","    if i % primes[j] == 0:\n","      isprime = False\n","    j += 1\n","  if isprime:\n","    primes.append(i)\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"46tRPotyZFs1"},"outputs":[],"source":["def checkprime(N):\n","  j = 0\n","  while primes[j] <= math.floor(math.sqrt(N)):\n","    if N % primes[j] == 0:\n","      return False\n","    j+=1\n","  return True\n","\n","def getpos(s,c):\n","  pos = []\n","  for i in range(len(s)):\n","    if s[i] == c:\n","      pos.append(i)\n","  return pos\n","\n","def highfreqpos(s):\n","  pos = []\n","  for c in (''.join(set(s))):\n","    temp = getpos(s,c)\n","    if len(temp) >= 3:\n","      pos.append(temp)\n","  return pos\n","\n","def swap(s,c,pos):\n","  temp = s \n","  for i in pos:\n","    temp = temp[:i]+c+temp[i+1:]\n","  return temp"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":511,"status":"ok","timestamp":1645064109271,"user":{"displayName":"Paul Chin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"18259033884778773794"},"user_tz":480},"id":"O1ANmo1YV2pL","outputId":"4ac923ca-5059-4f15-8872-d13177346860"},"outputs":[{"name":"stdout","output_type":"stream","text":["121313\n"]}],"source":["for p in primes:\n","  found = False\n","  d = len(str(p))\n","  if d < 4:\n","    continue\n","  replace_ind = highfreqpos(str(p))\n","  if not replace_ind:\n","    continue\n","  for r_ind in replace_ind:\n","    pool = list(itertools.combinations(r_ind,3))\n","    for pos in pool:\n","      count = 0\n","      for n in range(10):\n","        if n==0 and 0 in pos:\n","          continue\n","        if checkprime(int(swap(str(p), str(n),pos))):\n","          count += 1\n","      if count == 8:\n","        print(p)\n","        found = True\n","        break\n","    if found:\n","      break\n","  if found:\n","    break\n"]},{"cell_type":"markdown","metadata":{"id":"aAcPbh-udlyd"},"source":["**p52**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":182,"status":"ok","timestamp":1645066172112,"user":{"displayName":"Paul Chin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"18259033884778773794"},"user_tz":480},"id":"LNMWd8iFdnJe","outputId":"42f73d01-e3dd-452b-ea30-b1260ee2b3bb"},"outputs":[{"name":"stdout","output_type":"stream","text":["142857\n"]}],"source":["for n in range(1,1000000):\n","  if str(n)[0]!='1':\n","    continue  \n","  digitlist= sorted(list((str(n))))\n","  found = True\n","  for m in range(2,7):\n","    if sorted(list((str(m*n)))) != digitlist:\n","      found = False\n","      break\n","  if found:\n","    print(n)\n","    break\n","  "]},{"cell_type":"markdown","metadata":{"id":"9mnEfjRilfGw"},"source":["**p53**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":195,"status":"ok","timestamp":1645066613545,"user":{"displayName":"Paul Chin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"18259033884778773794"},"user_tz":480},"id":"gsKnvZQTiMEa","outputId":"5e437f83-57f6-4010-bcd8-12e96d3385be"},"outputs":[{"name":"stdout","output_type":"stream","text":["4075\n"]}],"source":["import math\n","count = 0\n","for n in range(1,101):\n","  for r in range(n//2+1):\n","    if math.factorial(n)/(math.factorial(r)*math.factorial(n-r))> 1000000:\n","      count += n+1-2*r\n","      break\n","print(count)"]},{"cell_type":"markdown","metadata":{"id":"jBbv0xe9ng6V"},"source":["**p54**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"56qbveYfGc7I"},"outputs":[],"source":["def reorg(hand):\n","  tuphand = []\n","  for card in hand:\n","    if card[0] == 'A':\n","      tuphand.append([14,card[1]])\n","    elif card[0] == 'K':\n","      tuphand.append([13,card[1]])\n","    elif card[0] == 'Q':\n","      tuphand.append([12,card[1]])\n","    elif card[0] == 'J':\n","      tuphand.append([11,card[1]])\n","    elif card[0] == 'T':\n","      tuphand.append([10,card[1]])    \n","    else:\n","      tuphand.append([int(card[0]),card[1]])\n","  tuphand.sort(key = lambda c : c[0])\n","  num = [c[0] for c in tuphand]\n","  suit = [c[1] for c in tuphand]\n","  return num, suit"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LZnrTGjunjZ0"},"outputs":[],"source":["def find_rank(hand):\n","  (num, suit) = hand\n","  rank = 0\n","  rank_num = []\n","  high_num = []\n","\n","  straight = False\n","  flush = False\n","  if (num[1]==num[0]+1) and (num[2]==num[1]+1) and (num[3]==num[2]+1) and (num[4]==num[3]+1):\n","    straight = True\n","    high_num = num\n","  if num[0]==2 and num[1]==3 and num[2]==4 and num[3]==5 and num[4]==14:\n","    straight = True\n","    high_num = num[:4].insert(0,14)\n","  if len(set(suit)) == 1:\n","    flush = True\n","    high_num = num\n","  if straight and flush:\n","    return 8, high_num\n","\n","  freq = [None]*5\n","  for i in range(5):\n","    if freq[i] == None:\n","      count = 0 \n","      for j in range(5):\n","        if num[j]==num[i]:\n","          count += 1\n","      for j in range(5):\n","        if num[j]==num[i]:\n","          freq[j]=count\n","\n","  if 4 in freq:\n","    for i in range(5):\n","      if freq[i] == 4:\n","        high_num.append(num[i])\n","      else:\n","        high_num.insert(0,num[i])\n","    return 7, high_num\n","  \n","  if 3 in freq and 2 in freq:\n","    for i in range(5):\n","      if freq[i] == 3:\n","        high_num.append(num[i])\n","      elif freq[i] == 2:\n","        high_num.insert(0,num[i])\n","    return 6, high_num\n","  \n","  if flush:\n","    return 5, high_num\n","  if straight:\n","    return 4, high_num\n","  \n","  if 3 in freq:\n","    for i in range(5):\n","      if freq[i] == 3:\n","        high_num.append(num[i])\n","      else:\n","        high_num.insert(0,num[i])\n","\n","    high_num.insert(0,high_num.pop(1))\n","    return 3, high_num\n","    \n","  if 2 in freq and freq[1] == 2 and freq[3] == 2:\n","    for i in range(5):\n","      if freq[i] == 2:\n","        high_num.append(num[i])\n","      else:\n","        high_num.insert(0,num[i])\n","    return 2, high_num\n","  \n","  if 2 in freq:\n","    singles = []\n","    for i in range(5):\n","      if freq[i] == 2:\n","        high_num.append(num[i])\n","      else:\n","        singles.append(num[i])\n","    high_num = singles + high_num\n","    return 1, high_num\n","  \n","  else:\n","    return 0, num\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sbZLcmoGOXFf"},"outputs":[],"source":["def winner(hand1, hand2):\n","  rank1, high1 = find_rank(reorg(hand1))\n","  rank2, high2 = find_rank(reorg(hand2))\n","  if rank1>rank2:\n","    return 1\n","  elif rank2>rank1:\n","    return 2\n","  else:\n","    for i in range(4,-1,-1):\n","      if high1[i] > high2[i]:\n","        return 1\n","      elif high1[i] < high2[i]:\n","        return 2\n","    return 0\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":218,"status":"ok","timestamp":1645147737876,"user":{"displayName":"Paul Chin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"18259033884778773794"},"user_tz":480},"id":"IvuFGklvboUM","outputId":"885779ed-dea8-491f-e9a2-91a4f99a8bd4"},"outputs":[{"name":"stdout","output_type":"stream","text":["376\n"]}],"source":["import csv\n","with open('p054_poker.txt') as file:\n","  handreader = csv.reader(file,delimiter = ' ',)\n","  count = 0 \n","  for row in handreader:\n","    if winner(row[:5],row[5:]) == 1:\n","      count +=1\n","  print(count)\n","  "]},{"cell_type":"markdown","metadata":{"id":"Zxwgi1KHczcb"},"source":["**p55**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":216,"status":"ok","timestamp":1645148299058,"user":{"displayName":"Paul Chin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"18259033884778773794"},"user_tz":480},"id":"biM1yFDoc25k","outputId":"10116c86-2dee-4905-8051-d3e6a09aa31e"},"outputs":[{"name":"stdout","output_type":"stream","text":["249\n"]}],"source":["def ispalin(N):\n","  return N == int(str(N)[::-1])\n","count = 0\n","for i in range(10001):\n","  temp = i\n","  for j in range(51):\n","    temp += int(str(temp)[::-1])\n","    if ispalin(temp):\n","      break\n","  else:\n","    count += 1\n","print(count)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":373,"status":"ok","timestamp":1645148663814,"user":{"displayName":"Paul Chin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"18259033884778773794"},"user_tz":480},"id":"P1mKNPcWe_tZ","outputId":"73f2bcd1-c57b-4551-961a-4f35be6390a0"},"outputs":[{"name":"stdout","output_type":"stream","text":["972\n"]}],"source":["maxdigsum = 0\n","for a in range(1,100):\n","  for b in range(1,100):\n","    x = list(str(a**b))\n","    s = 0 \n","    for c in x:\n","      s+= int(c)\n","    if s > maxdigsum:\n","      maxdigsum = s\n","print(maxdigsum)"]},{"cell_type":"markdown","metadata":{"id":"DijNoeSBgiAq"},"source":["**p57**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":170,"status":"ok","timestamp":1645149215283,"user":{"displayName":"Paul Chin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"18259033884778773794"},"user_tz":480},"id":"Rb-bAyM8gnVI","outputId":"a47853b8-9085-4fb1-9b07-8899ec6a6926"},"outputs":[{"name":"stdout","output_type":"stream","text":["153\n"]}],"source":["from fractions import Fraction\n","count = 0 \n","x = Fraction(3,2)\n","for i in range(1000):\n","  x = 1 + Fraction(1,x+1)\n","  if len(str(x.numerator))> len(str(x.denominator)):\n","    count += 1\n","print(count)"]},{"cell_type":"markdown","metadata":{"id":"-qolJhJFiTuw"},"source":["**p58**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CbM3UQNin5Vz"},"outputs":[],"source":["import math\n","primes = [2]\n","for i in range(3,1000000,2):\n","  k = 0\n","  isprime = True\n","  while primes[k] <= math.floor(math.sqrt(i)):\n","    if i % primes[k] ==0:\n","      isprime = False\n","      break\n","    k += 1\n","  if isprime:\n","    primes.append(i)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qByFJnzsom_d"},"outputs":[],"source":["def checkprime(x):\n","  k = 0\n","  while primes[k] <= math.floor(math.sqrt(x)):\n","    if x % primes[k] ==0:\n","      return False\n","    k += 1\n","  return True"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5267,"status":"ok","timestamp":1645151215825,"user":{"displayName":"Paul Chin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"18259033884778773794"},"user_tz":480},"id":"BJhyDuXqiVvK","outputId":"6eabaa8f-b1bf-420d-a8f8-1b2cc81ac723"},"outputs":[{"name":"stdout","output_type":"stream","text":["26241\n"]}],"source":["\n","NdiagP =0\n","Ndiag =1 \n","for i in range(1, 100000):\n","  Ndiag += 4\n","  for j in range(1,4):\n","    if checkprime((2*i+1)**2-2*i*j):\n","      NdiagP += 1\n","  if NdiagP/Ndiag < 0.1:\n","    print(2*i+1)\n","    break "]},{"cell_type":"markdown","metadata":{"id":"E_7q8-Ruv5vv"},"source":["**58**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ddcy1vp6tpCI"},"outputs":[],"source":["def dec2bit(n):\n","  s = ''\n","  temp = n\n","  for i in range(6,-1,-1):\n","    if temp >= 2**i:\n","      s= s+'1'\n","      temp -= 2**i\n","    else:\n","      s=s+'0'\n","  return s\n","\n","def bit2dec(n):\n","  num = 0\n","  for i in range(len(n)):\n","    if n[-1-i] == '1':\n","      num += 2**i \n","  return num\n","\n","def xor(s1, s2):\n","  s = ''\n","  for i in range(len(s1)):\n","    if s1[i] == s2[i]:\n","      s = s+'0'\n","    else:\n","      s= s+'1'\n","  return s\n","\n","decxor = lambda n1,n2: bit2dec(xor(dec2bit(n1),dec2bit(n2)))\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"58nWGlZYwOcj"},"outputs":[],"source":["# Using 1000 common words from https://github.com/pkLazer/password_rank/blob/master/4000-most-common-english-words-csv.csv\n","import csv\n","cipher = []\n","common_words = []\n","with open('p059_cipher.txt') as file:\n","  cr = csv.reader(file,delimiter = ',',)\n","  for row in cr:\n","    cipher = cipher + ([int(n) for n in row])\n","with open('common_words.txt') as file:\n","  cwr = csv.reader(file,delimiter = ',',)\n","  for row in cwr:\n","    common_words.append(row[0])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qi0XjCxq4hk0"},"outputs":[],"source":["words_ascii =[]\n","for w in common_words:\n","  words_ascii.append([ord(c) for c in w])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":464,"status":"ok","timestamp":1645170773643,"user":{"displayName":"Paul Chin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"18259033884778773794"},"user_tz":480},"id":"4XUw6IYOAAIB","outputId":"61d091c4-ec94-4e18-aa91-930889a45233"},"outputs":[{"name":"stdout","output_type":"stream","text":["timef&fzim(rhm&ifrrg [112, 109, 126]\n","taken from the intro [112, 101, 120]\n","tree}.faam3zhv.i}zr| [112, 118, 118]\n","true}>faqm3jhv>i}jr| [112, 118, 102]\n","tiref9fzvm(mhm9ifmrg [112, 109, 97]\n","eastn8wrw| lye8xnlco [97, 101, 96]\n","typev;fjtm8oh};ivorw [112, 125, 99]\n","tone`%f|jm.qhk%i`qra [112, 107, 125]\n","flowc$tk-pzh${cp`b [98, 104, 124]\n","tubez)fffm4}hq)iz}r{ [112, 113, 113]\n"]}],"source":["s = 11\n","for w in words_ascii:\n","  if len(w)<4:\n","    continue\n","  key = []\n","  for i in range(3):\n","    key.append(decxor(w[i],cipher[s+i]))\n","  xorcipher = []\n","  for a in range(len(w)):\n","    if a%3==0:\n","      xorcipher.append(decxor(cipher[s+a],key[0]))\n","    elif a%3 == 1:\n","      xorcipher.append(decxor(cipher[s+a],key[1]))\n","    elif a%3 == 2:    \n","      xorcipher.append(decxor(cipher[s+a],key[2]))   \n","  if xorcipher == w:\n","    decrypt = []\n","    for a in range(20):\n","      if a%3==0:\n","        decrypt.append(decxor(cipher[s+a],key[0]))\n","      elif a%3 == 1:\n","        decrypt.append(decxor(cipher[s+a],key[1]))\n","      elif a%3 == 2:    \n","        decrypt.append(decxor(cipher[s+a],key[2]))  \n","    print(''.join([chr(c) for c in decrypt]), key)   "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2,"status":"ok","timestamp":1645170874440,"user":{"displayName":"Paul Chin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"18259033884778773794"},"user_tz":480},"id":"YtvisvZP0fRS","outputId":"1f7c5917-f0e9-4645-b8fb-fd08e24b479d"},"outputs":[{"name":"stdout","output_type":"stream","text":["An extract taken from the introduction of one of Euler's most celebrated papers, \"De summis serierum reciprocarum\" [On the sums of series of reciprocals]: I have recently found, quite unexpectedly, an elegant expression for the entire sum of this series 1 + 1/4 + 1/9 + 1/16 + etc., which depends on the quadrature of the circle, so that if the true sum of this series is obtained, from it at once the quadrature of the circle follows. Namely, I have found that the sum of this series is a sixth part of the square of the perimeter of the circle whose diameter is 1; or by putting the sum of this series equal to s, it has the ratio sqrt(6) multiplied by s to 1 of the perimeter to the diameter. I will soon show that the sum of this series to be approximately 1.644934066842264364; and from multiplying this number by six, and then taking the square root, the number 3.141592653589793238 is indeed produced, which expresses the perimeter of a circle whose diameter is 1. Following again the same steps by which I had arrived at this sum, I have discovered that the sum of the series 1 + 1/16 + 1/81 + 1/256 + 1/625 + etc. also depends on the quadrature of the circle. Namely, the sum of this multiplied by 90 gives the biquadrate (fourth power) of the circumference of the perimeter of a circle whose diameter is 1. And by similar reasoning I have likewise been able to determine the sums of the subsequent series in which the exponents are even numbers.\n"]}],"source":["key = [101, 120, 112]\n","decrypt = []\n","for a in range(len(cipher)):\n","  if a%3==0:\n","    decrypt.append(decxor(cipher[a],key[0]))\n","  elif a%3 == 1:\n","    decrypt.append(decxor(cipher[a],key[1]))\n","  elif a%3 == 2:    \n","    decrypt.append(decxor(cipher[a],key[2]))  \n","print(''.join([chr(c) for c in decrypt]))   "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":152,"status":"ok","timestamp":1645170959739,"user":{"displayName":"Paul Chin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"18259033884778773794"},"user_tz":480},"id":"1gU_mzVC0-aZ","outputId":"9cd09759-8bfc-4bb3-f8ed-b68bcf29fffb"},"outputs":[{"name":"stdout","output_type":"stream","text":["129448\n"]}],"source":["print(sum(decrypt))"]},{"cell_type":"markdown","metadata":{"id":"WGiEO0n7193Z"},"source":["**p60**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BQ77ax4D988V"},"outputs":[],"source":["import math\n","primes = [2]\n","for i in range(3,20000,2):\n","  j = 0\n","  isprime = True \n","  while primes[j] <= math.floor(math.sqrt(i)):\n","    if i % primes[j] == 0:\n","      isprime = False\n","    j += 1\n","  if isprime:\n","    primes.append(i)\n","\n","\n","def checkprime(N):\n","  j = 0\n","  while primes[j] <= math.floor(math.sqrt(N)):\n","    if N % primes[j] == 0:\n","      return False\n","    j+=1\n","  return True\n","\n","pset=set(primes)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NVJjN_lhbx8V"},"outputs":[],"source":["def catprime(p1,p2):\n","  N1 = int(str(p1)+str(p2))\n","  N2 = int(str(p2)+str(p1))\n","  if N1 <= primes[-1] and N1 not in primes:\n","    return False\n","  if N1 > primes[-1] and not checkprime(N1):\n","    return False\n","  if N2 <= primes[-1] and N2 not in primes:\n","    return False\n","  if N2 > primes[-1] and not checkprime(N2):\n","    return False\n","  return True"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"smJGpkGv_tlP"},"outputs":[],"source":["import numpy as np\n","N = len(primes)//2\n","cat_able = np.zeros((N,N))\n","for i in range(N):\n","  for j in range(i+1,N): \n","    if catprime(primes[i],primes[j]):\n","      cat_able[i,j] = 1\n","      cat_able[j,i] =1"]},{"cell_type":"code","source":["def cancat (curind,pind):\n","  for q in curind:\n","    if cat_able[q,pind] == 0:\n","      return False\n","  return True\n","\n","def fivecat(cur):\n","  if len(cur) == 5:\n","    thefive = [primes[i] for i in cur]\n","    print(thefive, 'sums to', sum(thefive))\n","  else:\n","    for pind in range(N):\n","      if pind <= cur[-1]:\n","        continue\n","      if cancat(cur,pind):\n","        fivecat(cur+(pind,))      \n","\n","for i in range(N):\n","  fivecat((i,))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VP9RpgHxn30I","executionInfo":{"status":"ok","timestamp":1645353225374,"user_tz":480,"elapsed":7638,"user":{"displayName":"Paul Chin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"18259033884778773794"}},"outputId":"cb8237af-41f2-454d-c514-6d3e196ff2c5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[13, 5197, 5701, 6733, 8389] sums to 26033\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IwsL7OL6__nT"},"outputs":[],"source":[""]}],"metadata":{"colab":{"collapsed_sections":[],"name":"Euler51-60","provenance":[],"authorship_tag":"ABX9TyNoZvXkPQqjjMPqh1t0pXjx"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}